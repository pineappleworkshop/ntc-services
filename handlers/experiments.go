package handlers

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"github.com/btcsuite/btcd/btcutil/psbt"
	"github.com/labstack/echo/v4"
	"net/http"
)

/*
This experiment proves that we can unwrapped an unsigned PBST to ensure the inputs
are the same utxos as selected by the the maker/taker.
*/

func PSBTFromUnsignedTx(c echo.Context) error {
	//psbtHex := "70736274ff0100fd85010200000004cba2e1d1fb3d04af9ada6b5cf91f58fa1a977a644b6f398b68e251c99da03e500000000000ffffffff8a688114865023cb24f2a336f0480bf3c53d6819ecbeb3014e466cf18e162ad60000000000ffffffff90b2b9e55b3b4b8e6757d20109672fb0ef9369d8cc4de274bf88bd5dd4e84d310200000000ffffffff76ede0712b48a913f0d040c199c4e2bbc7201936eeba7ce3bd8add8df7945e260200000000ffffffff058f200000000000002251206ba9b63de4e17c5ec52351ac79d40de6a46b0ca28b3b818d76e8e20d51743dce220200000000000022512058b49d8f87981075be5f5459ecd7679f8d79caf31a87649c5532092fd5145310e8030000000000002251205cba2279dc9a998530a4fe43e78cdbf7793e5371c27877bbca3d5364f4bc1fc6270800000000000022512058b49d8f87981075be5f5459ecd7679f8d79caf31a87649c5532092fd5145310100f0000000000002251206ba9b63de4e17c5ec52351ac79d40de6a46b0ca28b3b818d76e8e20d51743dce000000000001012b8f2000000000000022512058b49d8f87981075be5f5459ecd7679f8d79caf31a87649c5532092fd51453100108420140b3666e07b2600608c04ba502951c2be75d3472bdd99c68f2cf779762629ee4d33a40797b50e8a86b3a20b3b50f83a638e623aae1faedfdc08aae46df9ff83dcd0001012b22020000000000002251206ba9b63de4e17c5ec52351ac79d40de6a46b0ca28b3b818d76e8e20d51743dce0001012bbc1600000000000022512058b49d8f87981075be5f5459ecd7679f8d79caf31a87649c5532092fd5145310010842014098d6bea9f200a047131180610035f618b1f693dce5281ed7ad31be3a5c9c680c0130d5e19902c0d1581244a917b79b65a1fdb240c4bae38e6930ae6e8f9ba2400001012ba51d0000000000002251206ba9b63de4e17c5ec52351ac79d40de6a46b0ca28b3b818d76e8e20d51743dce000000000000"
	psbtHex := "70736274ff0100fd8501020000000400cd8d0f91fec30153ce9ccabf8c0324936c5a69fb159ad80c442eb3b48ac8240000000000ffffffff5ebae2602772ed3e24d34e49d865ed3018f493151e08c051532fb4a9d9feef3b0000000000ffffffff732965beb7f3cff73b96c15b89011dfcfbb0be227a64464e5a440e470ed551030200000000ffffffff0dca5587d78b08380c187990747a12b9a833a9daa4e352346c20252f284bb4cd0100000000ffffffff058602000000000000225120eb3c01181596f053dfb5b860ae741010ba43b727b7505e2428248e161cf6f1714b0100000000000022512037e089592f0bfa62c5fe83e6e772abcf87291b43272f85dd26ce8ce66b1f65abe8030000000000002251205cba2279dc9a998530a4fe43e78cdbf7793e5371c27877bbca3d5364f4bc1fc6751000000000000022512037e089592f0bfa62c5fe83e6e772abcf87291b43272f85dd26ce8ce66b1f65ab9c03000000000000225120eb3c01181596f053dfb5b860ae741010ba43b727b7505e2428248e161cf6f171000000000001012b860200000000000022512037e089592f0bfa62c5fe83e6e772abcf87291b43272f85dd26ce8ce66b1f65ab0108420140dcf448ed1b7fe9411ad4b6e162afe11b73c8e46825d7a8cd694e683e21f94d1b93141c5c7159e7b2c656cb33ddc7bb3e9e50a47d38ce4fe8f968f78f654d40c50001012b4b01000000000000225120eb3c01181596f053dfb5b860ae741010ba43b727b7505e2428248e161cf6f1710001012be21900000000000022512037e089592f0bfa62c5fe83e6e772abcf87291b43272f85dd26ce8ce66b1f65ab01084201405a71a20a1eda8c51ba99b6e5da935797d4c284c4eff80ab42948c53a357b138fe639d46edf5a5105d7ce13b9d90af1e3e62cf8acdf8ff9cdf915d8ae523fd7230001012b090d000000000000225120eb3c01181596f053dfb5b860ae741010ba43b727b7505e2428248e161cf6f171000000000000"
	//psbtHex := ""

	psbtBytes, err := hex.DecodeString(psbtHex)
	if err != nil {
		c.Logger().Errorf("Failed to decode hex: %v", err)
	}

	psbtIOReader := bytes.NewReader(psbtBytes)
	p, err := psbt.NewFromRawBytes(psbtIOReader, false)
	if err != nil {
		c.Logger().Errorf("Failed to decode PSBT: %v", err)
	}

	fmt.Println("++++++++++++++++++++++++")
	fmt.Printf("packet: %+v \n", p)
	fmt.Println("++++++++++++++++++++++++")

	fmt.Println("||||||||||||||||||||||||")
	fmt.Printf("UnsignedTx: %+v \n", *p.UnsignedTx)
	for i, in := range p.UnsignedTx.TxIn {
		fmt.Printf("in %v: %+v \n", i, *in)
	}
	for i, out := range p.UnsignedTx.TxOut {
		fmt.Printf("out %v: %+v \n", i, *out)
	}
	fmt.Println("||||||||||||||||||||||||")

	fmt.Println("========================")
	for i, in := range p.Inputs {
		fmt.Printf("in %v: %+v \n", i, *in.WitnessUtxo)
	}
	fmt.Println("========================")

	fmt.Println("========================")
	for i, out := range p.Outputs {
		fmt.Printf("out %v: %+v \n", i, out)
	}
	fmt.Println("========================")

	return c.JSON(http.StatusOK, nil)
}
